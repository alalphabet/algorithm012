/**
91. 解码方法

 
一条包含字母 A-Z 的消息通过以下方式进行了编码：

'A' -> 1
'B' -> 2
...
'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。

示例 1:

输入: "12"
输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2:

输入: "226"
输出: 3
解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/decode-ways
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

C++
int numDecodings(string s) {
    if (s[0] == '0') return 0;
    int pre = 1, curr = 1;//dp[-1] = dp[0] = 1
    for (int i = 1; i < s.size(); i++) {
        int tmp = curr;
        if (s[i] == '0')
            if (s[i - 1] == '1' || s[i - 1] == '2') curr = pre;
            else return 0;
        else if (s[i - 1] == '1' || (s[i - 1] == '2' && s[i] >= '1' && s[i] <= '6'))
            curr = curr + pre;
        pre = tmp;
    }
    return curr;
}



Java
class Solution {
   private Integer[] mem;

    //A-1 B-2...Z-26
    public int numDecodings(String s) {
        if ("0".equals(s)) return 0;
        if (s.length() == 1) return 1;
        mem = new Integer[s.length()];
        return f(s, 0);
    }

    public int f(String s, int index) {
        //越界
        if (index >= s.length()) return 1;
        char c = s.charAt(index);
        //0开头，直接返回0
        if (c == '0') return 0;
        //就一个数字，直接返回1
        if (index == s.length() - 1) return 1;
        //优先从备忘录中找，找到则直接返回
        if (mem[index] != null) return mem[index];
        //大于等于3，因为最大26，3一定不会和下一位组成一个合法的编码f(n) = f(n-1)，
        if (c >= '3') {
            return f(s, index + 1);
        }
        //c=1或2
        char next = s.charAt(index + 1);
        //下一位等于0，0一定是和1或2一起的
        if (next == '0') {
            mem[index] = f(s, index + 2);
            return mem[index];
        }
        //下一位大于0且小于等于6，则有可能是单独的，也有可能和1或2一起
        if (next <= '6') {
            mem[index] = f(s, index + 1) + f(s, index + 2);
            return mem[index];
        }
        //c=1或2，但next>=7
        if (c == '1') {
            mem[index] = f(s, index + 1) + f(s, index + 2);
            return mem[index];
        }
        //c=2,next>7
        mem[index] = f(s, index + 1);
        return mem[index];

    }
}

//Python
class Solution:
    def numDecodings(self, s: str) -> int:
        size = len(s)
        if size == 0:
            return 0

        # dp[i]：以 s[i] 结尾的前缀字符串的解码个数

        # 分类讨论：
        # 1、s[i] != '0' 时，dp[i] = dp[i - 1]
        # 2、10 <= s[i - 1..i] <= 26 时，dp[i] += dp[i - 2]
        dp = [0 for _ in range(size)]

        if s[0] == '0':
            return 0
        dp[0] = 1

        for i in range(1, size):
            if s[i] != '0':
                dp[i] = dp[i - 1]

            num = 10 * (ord(s[i - 1]) - ord('0')) + (ord(s[i]) - ord('0'))

            if 10 <= num <= 26:
                if i == 1:
                    dp[i] += 1
                else:
                    dp[i] += dp[i - 2]
        return dp[size - 1]

